
;; Function main (main, funcdef_no=0, decl_uid=3174, cgraph_uid=1, symbol_order=0)

;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12
;;
;; Loop 2
;;  header 10, latch 9
;;  depth 1, outer 0
;;  nodes: 10 9 8 6 7
;;
;; Loop 3
;;  header 8, latch 7
;;  depth 2, outer 2
;;  nodes: 8 7
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 10 }
;; 6 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 7 9 }
;; 9 succs { 10 }
;; 10 succs { 6 11 }
;; 11 succs { 12 }
;; 12 succs { 1 }
prog.c:15: printf: objsize = 9223372036854775807, fmtstr = "sum: %d
"
  Directive 1 at offset 0: "sum: ", length = 5
    Result: 5, 5, 5, 5 (5, 5, 5, 5)
  Directive 2 at offset 5: "%d"
    Result: 5, 5, 5, 5 (10, 10, 10, 10)
  Directive 3 at offset 7: "
", length = 1
    Result: 1, 1, 1, 1 (11, 11, 11, 11)
  Directive 4 at offset 8: "", length = 1
int main ()
{
  int sum;
  int j;
  int i;
  int a[1000];
  int D.3193;
  int _1;
  int _2;
  int _3;
  int _4;
  int _16;

  <bb 2> :
  sum_11 = 10000;
  i_12 = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  a[i_5] = i_5;
  i_23 = i_5 + 1;

  <bb 4> :
  # i_5 = PHI <i_12(2), i_23(3)>
  if (i_5 <= 99)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  i_14 = 0;
  goto <bb 10>; [INV]

  <bb 6> :
  j_18 = 0;
  goto <bb 8>; [INV]

  <bb 7> :
  _1 = a[i_6];
  _2 = a[j_7];
  _3 = _1 * _2;
  a[i_6] = _3;
  j_21 = j_7 + 1;

  <bb 8> :
  # j_7 = PHI <j_18(6), j_21(7)>
  _4 = i_6 * i_6;
  if (j_7 < _4)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  i_19 = i_6 + 1;

  <bb 10> :
  # i_6 = PHI <i_14(5), i_19(9)>
  if (i_6 <= 9)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  printf ("sum: %d\n", sum_11);
  _16 = 0;
  a ={v} {CLOBBER(eol)};

  <bb 12> :
<L10>:
  return _16;

}


