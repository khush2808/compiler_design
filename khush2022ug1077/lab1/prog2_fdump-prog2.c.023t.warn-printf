
;; Function add (add, funcdef_no=0, decl_uid=3176, cgraph_uid=1, symbol_order=0)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3
;; 2 succs { 3 }
;; 3 succs { 1 }
int add (int a, int b)
{
  int D.3190;
  int _3;

  <bb 2> :
  _3 = a_1(D) + b_2(D);

  <bb 3> :
<L0>:
  return _3;

}



;; Function subtract (subtract, funcdef_no=1, decl_uid=3180, cgraph_uid=2, symbol_order=1)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3
;; 2 succs { 3 }
;; 3 succs { 1 }
int subtract (int a, int b)
{
  int D.3192;
  int _3;

  <bb 2> :
  _3 = a_1(D) - b_2(D);

  <bb 3> :
<L0>:
  return _3;

}



;; Function factorial (factorial, funcdef_no=2, decl_uid=3183, cgraph_uid=3, symbol_order=2)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
int factorial (int num)
{
  int D.3196;
  int _1;
  int _2;
  int _3;
  int _8;
  int _9;

  <bb 2> :
  if (num_5(D) <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _9 = 1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]

  <bb 4> :
  _1 = num_5(D) + -1;
  _2 = factorial (_1);
  _8 = num_5(D) * _2;

  <bb 5> :
  # _3 = PHI <_9(3), _8(4)>
<L2>:
  return _3;

}



;; Function main (main, funcdef_no=3, decl_uid=3185, cgraph_uid=4, symbol_order=3)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3
;; 2 succs { 3 }
;; 3 succs { 1 }
prog2.c:21: printf: objsize = 9223372036854775807, fmtstr = "Addition: %d
"
  Directive 1 at offset 0: "Addition: ", length = 10
    Result: 10, 10, 10, 10 (10, 10, 10, 10)
  Directive 2 at offset 10: "%d"
    Result: 1, 1, 11, 11 (11, 11, 21, 21)
  Directive 3 at offset 12: "
", length = 1
    Result: 1, 1, 1, 1 (12, 12, 22, 22)
  Directive 4 at offset 13: "", length = 1
prog2.c:22: printf: objsize = 9223372036854775807, fmtstr = "Subtraction: %d
"
  Directive 1 at offset 0: "Subtraction: ", length = 13
    Result: 13, 13, 13, 13 (13, 13, 13, 13)
  Directive 2 at offset 13: "%d"
    Result: 1, 1, 11, 11 (14, 14, 24, 24)
  Directive 3 at offset 15: "
", length = 1
    Result: 1, 1, 1, 1 (15, 15, 25, 25)
  Directive 4 at offset 16: "", length = 1
prog2.c:23: printf: objsize = 9223372036854775807, fmtstr = "Factorial of %d: %d
"
  Directive 1 at offset 0: "Factorial of ", length = 13
    Result: 13, 13, 13, 13 (13, 13, 13, 13)
  Directive 2 at offset 13: "%d"
    Result: 1, 1, 11, 11 (14, 14, 24, 24)
  Directive 3 at offset 15: ": ", length = 2
    Result: 2, 2, 2, 2 (16, 16, 26, 26)
  Directive 4 at offset 17: "%d"
    Result: 1, 1, 11, 11 (17, 17, 37, 37)
  Directive 5 at offset 19: "
", length = 1
    Result: 1, 1, 1, 1 (18, 18, 38, 38)
  Directive 6 at offset 20: "", length = 1
int main ()
{
  int b;
  int a;
  int D.3198;
  int b.0_1;
  int a.1_2;
  int _3;
  int b.2_4;
  int a.3_5;
  int _6;
  int a.4_7;
  int _8;
  int a.5_9;
  int _20;

  <bb 2> :
  scanf ("%d %d", &a, &b);
  b.0_1 = b;
  a.1_2 = a;
  _3 = add (a.1_2, b.0_1);
  printf ("Addition: %d\n", _3);
  b.2_4 = b;
  a.3_5 = a;
  _6 = subtract (a.3_5, b.2_4);
  printf ("Subtraction: %d\n", _6);
  a.4_7 = a;
  _8 = factorial (a.4_7);
  a.5_9 = a;
  printf ("Factorial of %d: %d\n", a.5_9, _8);
  a ={v} {CLOBBER(eol)};
  b ={v} {CLOBBER(eol)};
  _20 = 0;

  <bb 3> :
<L0>:
  return _20;

}


